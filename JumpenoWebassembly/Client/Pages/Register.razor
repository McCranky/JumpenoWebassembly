@page "/register"

@using JumpenoWebassembly.Shared.Models.Request
@inject Services.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IToastService ToastService

<div class="wrapper-flex">
    <EditForm Model="@user" OnValidSubmit="HandleRegistration" class="auth-form">
        <DataAnnotationsValidator />

        <h1>Please register</h1>
        <InputText type="email" @bind-Value="@user.Email" placeholder="Email address" />
        <InputText type="text" @bind-Value="@user.Username" placeholder="Nickname" />
        <InputText type="password" @bind-Value="@user.Password" placeholder="Password" />
        <InputText type="password" @bind-Value="@user.ConfirmPassword" placeholder="Repeat Password" />
        <div class="input-check">
            <InputCheckbox type="checkbox" @bind-Value="@user.IsConfirmed" id="check" />
            <label for="check">Confirm human</label>
        </div>

        <button type="submit">Register</button>

        <ValidationSummary />
    </EditForm>

    <div class="third-party-logins">
        <button class="facebook" @onclick="@(() => Navigation.NavigateTo("api/auth/facebookSignIn", true))">
            <i class="fab fa-facebook-square"></i>
        </button>
        <button class="google" @onclick="@(() => Navigation.NavigateTo("api/auth/googleSignIn", true))">
            <i class="fab fa-google-plus-square"></i>
        </button>
        <button class="anonym" @onclick="@(() => Navigation.NavigateTo("api/auth/anonymSignIn", true))">
            <i class="fas fa-user-secret"></i>
        </button>
    </div>
</div>

@code {
    UserRegisterRequest user = new UserRegisterRequest();

    async void HandleRegistration()
    {
        var result = await AuthService.Register(user);
        if (result.Id >= 0) {
            var loginResult = await AuthService.Login(new UserLoginRequest { Email = user.Email, Password = user.Password });
            Navigation.NavigateTo("/", true);
        } else {
            ToastService.ShowError(result.Message);
        }
    }
}
