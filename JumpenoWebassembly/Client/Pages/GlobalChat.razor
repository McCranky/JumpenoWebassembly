@page "/globalchat"
@attribute [Authorize]

@implements IAsyncDisposable
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<div class="wrapper-flex">
    <div class="card card-glass width-75 height-50">
        <h1>Global Chat</h1>
        <div class="width-100 height-100">
            <ul class="ul-none height-100">
                @foreach (var message in messages)
                {
                    <li class="li-message">
                        @message
                    </li>
                }
            </ul>


            <div class="global-chat-input">
                <hr>
                <div class="msg-input">


                    <textarea class="msg-input-box"
                              placeholder="Type message..."
                              @bind="messageInput">
                </textarea>

                    <button class="msg-input-btn" @onclick="Send" disabled="@(!IsConnected)">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(GlobalChatHubC.Url)
                , option => option.AccessTokenProvider = async () => await LocalStorage.GetItemAsStringAsync("authToken"))
            .Build();

        hubConnection.On<string, string>(GlobalChatHubC.ReceiveMessage, (user, message) => {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() =>
        hubConnection.SendAsync(GlobalChatHubC.SendMessage, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}